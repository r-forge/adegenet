AB.idx
AB.idx
subsetSeg
PRECISION
subsetSeg
M
N
.C("CheckAllSeg", as.integer(nrow(subsetSeg)), as.integer(ncol(subsetSeg)), 
        as.double(as.matrix(subsetSeg)), as.double(M), as.double(N), 
        temp, PACKAGE = "adegenet")[[6]]
subsetSeg.old <- subsetSeg
subsetSeg.new <- subsetSeg
subsetSeg.new[2,] <- NULL
subsetSeg.new
subsetSeg.new <- subsetSeg.new[1,,drop=FALSE]
subsetSeg.new
subsetSeg.new
.C("CheckAllSeg", as.integer(nrow(subsetSeg.new)), as.integer(ncol(subsetSeg.new)), 
        as.double(as.matrix(subsetSeg.new)), as.double(M), as.double(N), 
        temp, PACKAGE = "adegenet")[[6]]
datBug <- list(subsetSeg=subsetSeg, M=as.double(M), N=as.double(N), call=".C("CheckAllSeg", as.integer(nrow(subsetSeg.new)), as.integer(ncol(subsetSeg.new)), as.double(as.matrix(subsetSeg.new)), as.double(M), as.double(N), temp, PACKAGE = "adegenet")[[6]]" )
datBug
datBug <- list(subsetSeg=subsetSeg, M=as.double(M), N=as.double(N), call=".C("CheckAllSeg", as.integer(nrow(subsetSeg.new)), as.integer(ncol(subsetSeg.new)), as.double(as.matrix(subsetSeg.new)), as.double(M), as.double(N), temp, PACKAGE = 'adegenet')[[6]]" )
datBug <- list(subsetSeg=subsetSeg, M=as.double(M), N=as.double(N), call='.C("CheckAllSeg", as.integer(nrow(subsetSeg.new)), as.integer(ncol(subsetSeg.new)), as.double(as.matrix(subsetSeg.new)), as.double(M), as.double(N), temp, PACKAGE = "adegenet")[[6]]' )
datBug
save(datBug, file="datBug.RData")
points(subsetSeg[2,c(1,3)],subsetSeg[2,c(2,4)], col="red")
Q
mon <- monmonier(coords, Da, cn, threshold=0.1, nrun=1, skip.local.diff = rep(1, 1)) 
mon <- monmonier(coords, Da, cn, threshold=0.1, nrun=1, skip.local.diff = rep(1, 1)) 
mon <- monmonier(coords, Da, cn, threshold=0.1, nrun=1, skip.local.diff = rep(1, 1)) 
debug(checkNext)
subsetSeg
segMat
currentDir1
result[[1]]
result[[1]]$dir1
subsetSeg
rownames(subsetSeg)
grep(rownames(subsetSeg),"dir1")
?grep
grep("dir1",rownames(subsetSeg))
        prevSeg <- grep("dir1",rownames(subsetSeg))
        prevSeg <- prevSeg[length(prevSeg]

        prevSeg <- prevSeg[length(prevSeg)]
prevSeg
paste("dir",curDur,sep="")
paste("dir",curDir,sep="")
curDir
curDir=as.integer(1)
paste("dir",curDir,sep="")
       prevSeg <- grep(paste("dir",curDir,sep=""),rownames(subsetSeg))
        prevSeg <- prevSeg[length(prevSeg)]

prevSeg
subsetSeg
        subsetSeg <- segMat[-prevSeg,,drop=FALSE]

subsetSeg
Q
undebug(monmonier)
mon <- monmonier(coords, Da, cn, threshold=0.1, nrun=1, skip.local.diff = rep(1, 1)) 
source("/home/master/dev/adegenet/pkg/R/monmonier.R")
mon <- monmonier(coords, Da, cn, threshold=0.1, nrun=1, skip.local.diff = rep(1, 1)) 
debug(monmonier)
debug(checkNext)
mon <- monmonier(coords, Da, cn, threshold=0.1, nrun=1, skip.local.diff = rep(1, 1)) 
debug(checkNext)
mon <- monmonier(coords, Da, cn, threshold=0.1, nrun=1, skip.local.diff = rep(1, 1)) 
debug(checkNext)
checkNext(result[[run]]$dir1[[length(result[[run]]$dir1)]]$M, 
        currentDir1$M, result[[run]]$dir1[[length(result[[run]]$dir1)]]$A[1], 
        result[[run]]$dir1[[length(result[[run]]$dir1)]]$B[1], 
        currentDir1$A[1], currentDir1$B[1], curDir = as.integer(1)))
checkNext(result[[run]]$dir1[[length(result[[run]]$dir1)]]$M, 
        currentDir1$M, result[[run]]$dir1[[length(result[[run]]$dir1)]]$A[1], 
        result[[run]]$dir1[[length(result[[run]]$dir1)]]$B[1], 
        currentDir1$A[1], currentDir1$B[1], curDir = as.integer(1))
prevSeg
subsetSeg
setMat
segMet
segMat
segMat[integer(0),]
segMat[-integer(0),]
Q
source("/home/master/dev/adegenet/pkg/R/monmonier.R")
mon <- monmonier(coords, Da, cn, threshold=0.1, nrun=1, skip.local.diff = rep(1, 1)) 
example(monmonier)
q()
y
mon <- monmonier(coords, Da, cn, threshold=0.1, nrun=1, skip.local.diff = rep(1, 1)) 
warnings()
example(monmonier)
q()
n
mon <- monmonier(coords, Da, cn, threshold=0.1, nrun=1, skip.local.diff = rep(1, 1)) 
rm(monmonier)
mon <- monmonier(coords, Da, cn, threshold=0.1, nrun=1, skip.local.diff = rep(1, 1)) 
plot(mon)
example(monmonier)
?monmonier
     data(sim2pop)

 gab <- chooseCN(sim2pop@other$xy,ask=FALSE,type=2)

     # filter random noise 
     pca1 <- dudi.pca(sim2pop@tab,scale=FALSE, scannf=FALSE, nf=1)

     # run the algorithm
     mon1 <- monmonier(sim2pop@other$xy,dist(pca1$l1[,1]),gab,scanthres=FALSE)

     pca1 <- dudi.pca(sim2pop@tab,scale=FALSE, scannf=FALSE, nf=1)

     mon1 <- monmonier(sim2pop@other$xy,dist(pca1$l1[,1]),gab,scanthres=FALSE)

plot(mon1)
plot(mon1,cex=2)
plot(mon1,lwd=2)
args(plot.monmonier)
plot(mon1,bwd=10)
plot(mon1,bwd=100)
plot(mon1,bwd=100, add.ar=FALSE)
     plot(mon2,mondata2$x2,method="greylevel",add.arr=FALSE,bwd=6,col="red",csize=.5)

 plot(mon2,method="greylevel",add.arr=FALSE,bwd=6,col="red",csize=.5)
 plot(mon2,method="greylevel",add.arr=FALSE,bwd=10,col="red",csize=.5)
     mon1 <- monmonier(sim2pop@other$xy,dist(pca1$l1[,1]),gab,scanthres=FALSE)

plot(mon1)
plot(mon1,add.arr=FALSE)
plot(mon1,add.arr=FALSE, bwd=4)
plot(mon1,add.arr=FALSE, bwd=40)
debug(plot.monmonier)
plot(mon1)
val.1
cex.bwd
cex.bwd.1
val.1
val.2
val.1
val.2
cex.bwd.1
cex.bwd.2
max(c(cex.bwd.1,cex.bwd.2))
max(c(cex.bwd.1,cex.bwd.2),na.rm=TRUE)
args(max)
cex.bwd.1
cex.bwd.12
cex.bwd.2
Q
 plot(mon1)
Q
undebug(mon1)
undebug(plot.monmonier)
plot(mon1)
source("/home/master/dev/adegenet/pkg/R/monmonier.R")
plot(mon1)
source("")
q()
n
